<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:c="http://www.springframework.org/schema/c" xmlns:cache="http://www.springframework.org/schema/cache" xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	    http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd http://cxf.apache.org/jaxws
        http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${hibernate.validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="mergeStat" /> -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
			</props>
		</property>

		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.sirius.skymall.user.model</value>
			</list>
		</property>

		<!-- 自动扫描hbm方式配置的hibernate文件和.hbm文件 -->
		<!-- <property name="mappingDirectoryLocations"> <list> <value>classpath:sy/hbm</value> </list> </property> -->
	</bean>

	<!-- 配置事务管理器 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="saveOrUpdate*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="grant*" propagation="REQUIRED" />

			<tx:method name="init*" propagation="REQUIRED" />

			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 第一个*代表所有的返回值类型；第二个*代表所有的类；第三个*代表类所有方法；..代表子或者孙子包；最后一个..代表所有的参数 -->
		<aop:pointcut id="transactionPointcut" expression="(execution(* com.sirius.skymall.user.service..*Impl.*(..)))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	
	
	<!-- web service -->
	<bean id="adminUserWebService" class="com.sirius.skymall.user.ws.impl.AdminUserWebServiceImpl">
	</bean>

	<bean id="userWebService" class="com.sirius.skymall.user.ws.impl.UserWebServiceImpl">
	</bean>
	<bean id="appLogWebService" class="com.sirius.skymall.user.ws.impl.AppLogWebServiceImpl">
	</bean>
	<bean id="newsLogWebService" class="com.sirius.skymall.user.ws.impl.NewsLogWebServiceImpl">
	</bean>
	<bean id="ssoWebService" class="com.sirius.skymall.user.ws.impl.SSOWebServiceImpl">
	</bean>
	<bean id="messageWebService" class="com.sirius.skymall.user.ws.impl.MessageWebServiceImpl">
	</bean>
	<bean id="licenceWebService" class="com.sirius.skymall.user.ws.impl.LicenceWebServiceImpl">
	</bean>
	<bean id="configWebService" class="com.sirius.skymall.user.ws.impl.ConfigWebServiceImpl">
	</bean>
	<bean id="siteSettingWebService" class="com.sirius.skymall.user.ws.impl.SiteSettingWebServiceImpl">
	</bean>
	
	<bean id="censorwordsWsService" class="com.sirius.skymall.user.ws.impl.CensorwordsWsServiceImpl"></bean>
	
	<bean id="feedbackWebServic" class="com.sirius.skymall.user.ws.impl.FeedbackWebServiceImpl"></bean>
	<bean id="userPasswordWebService" class="com.sirius.skymall.user.ws.impl.UserPasswordWebServiceImpl"></bean>
	<bean id="userAddressWebService" class="com.sirius.skymall.user.ws.impl.UserAddressWebServiceImpl"></bean>
	<bean id="userRosterWebService" class="com.sirius.skymall.user.ws.impl.UserRosterWebServiceImpl"></bean>
	<bean id="securityWebService" class="com.sirius.skymall.user.ws.impl.SecurityWebServiceImpl"></bean>
	<bean id="surveyWebService" class="com.sirius.skymall.user.ws.impl.SurveyWebServiceImpl"></bean>
	<bean id="moduleWebService" class="com.sirius.skymall.user.ws.impl.ModuleWebServiceImpl"></bean>
	<bean id="outLoggingInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
	<bean id="inLoggingInterceptor" class="org.apache.cxf.interceptor.LoggingInInterceptor" />
	<bean id="jsonpPostStreamInterceptor"
		class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPostStreamInterceptor" />
	<bean id="jsonpInInterceptor" class="org.apache.cxf.jaxrs.provider.jsonp.JsonpInInterceptor">
		<property name="callbackParam" value="jsonpCallback" />
	</bean>
	<bean id="jsonpPreStreamInterceptor"
		class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPreStreamInterceptor">
		<property name="mediaType" value="application/json" />
	</bean>
	<util:list id="jsonKeys">
		<value>user</value>
		<value>phoneUserList</value>
	</util:list>
	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<property name="dropRootElement" value="true" />
		<property name="dropCollectionWrapperElement" value="true" />
		<property name="serializeAsArray" value="true" />
		<property name="arrayKeys" ref="jsonKeys" />
	</bean>
	<jaxrs:server id="restService" address="/">
		<jaxrs:serviceBeans>
			<ref bean="userWebService" />
			<ref bean="feedbackWebServic" />
			<ref bean="userPasswordWebService" />
			<ref bean="userAddressWebService" />
			<ref bean="userRosterWebService" />
			<ref bean="securityWebService" />
			<ref bean="configWebService" />
			<ref bean="ssoWebService" />
			<ref bean="messageWebService" />
			<ref bean="licenceWebService" />
			<ref bean="siteSettingWebService"/>
			<ref bean="adminUserWebService"/>
			<ref bean="censorwordsWsService"/>
			<ref bean="surveyWebService"/>
			<ref bean="moduleWebService"/>
			<ref bean="appLogWebService"/>
			<ref bean="newsLogWebService"/>
		</jaxrs:serviceBeans>
		<jaxrs:extensionMappings>
			<entry key="json" value="application/json" />
			<entry key="xml" value="application/xml" />
		</jaxrs:extensionMappings>
		<jaxrs:outInterceptors>
			<ref bean="outLoggingInterceptor" />
			<ref bean="jsonpPostStreamInterceptor" />
			<ref bean="jsonpPreStreamInterceptor" />

		</jaxrs:outInterceptors>
		<jaxrs:inInterceptors>
			<ref bean="inLoggingInterceptor" />
			<ref bean="jsonpInInterceptor" />
		</jaxrs:inInterceptors>
		</jaxrs:server>
</beans>
